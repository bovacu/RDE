// Created by borja on 6/2/22.


#include "core/systems/inputSystem/input/KeyboardInput.h"
#include "core/systems/eventSystem/KeyEvent.h"
#include "core/systems/inputSystem/input/Input.h"
#include "core/util/Functions.h"
#include <SDL_events.h>
#include <stdio.h>

namespace RDE {


    void KeyboardInput::init(Engine* _engine, Window* _window) {
        engine = _engine;
        window = _window;

        UniqueDelegate<void(SDL_Event&)> kdeDel, kueDel, tteDel;
        kdeDel.bind<&KeyboardInput::onKeyDown>(this);
        kueDel.bind<&KeyboardInput::onKeyUp>(this);
        tteDel.bind<&KeyboardInput::onTextTyped>(this);

        events[RDE_SYSTEM_EVENT_KEY_DOWN_E] = kdeDel;
		events[RDE_SYSTEM_EVENT_KEY_UP_E] = kueDel;
		events[RDE_SYSTEM_EVENT_KEY_TEXT_INPUT_E] = tteDel;

        pressedKeyboardKeys = {
			{RDE_KEYBOARD_KEY_LEFT_CTRL,     RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_LEFT_ALT,     RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_SPACE,        RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_RIGHT_ALT,    RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_RIGHT_CTRL, 	 RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_LEFT_SHIFT,   RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_Z,            RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_X,            RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_C,            RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_V,            RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_B,            RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_N,            RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_M,            RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_COMMA,        RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_PERIOD,       RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_SLASH,        RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_RIGHT_SHIFT,  RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_CAPS_LOCK,    RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_A,            RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_S,            RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_D,            RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_F,            RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_G,            RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_H,            RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_J,            RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_K,            RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_L,            RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_SEMICOLON,    RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_APOSTROPHE,   RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_ENTER,        RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_TAB,          RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_Q,            RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_W,            RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_E,            RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_R,            RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_T,            RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_Y,            RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_U,            RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_I,            RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_O,            RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_P,            RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_LEFT_BRACKET, RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_RIGHT_BRACKET,RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_BACK_SLASH,   RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_GRACE_ACCENT, RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_D0,           RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_D1,           RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_D2,           RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_D3,           RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_D4,           RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_D5,           RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_D6,           RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_D7,           RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_D8,           RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_D9,           RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_MINUS,        RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_EQUAL,        RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_BAKCSPACE,    RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_ESCAPE,       RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_F1,           RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_F2,           RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_F3,           RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_F4,           RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_F5,           RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_F6,           RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_F7,           RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_F8,           RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_F9,           RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_F10,          RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_F11,          RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_F12,          RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_PRINT_SCREEN, RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_SCROLL_LOCK,  RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_INSERT,       RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_DELETE,       RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_HOME,         RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_END,          RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_PAGE_UP,      RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_PAGE_DOWN,    RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_RIGHT,        RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_LEFT,         RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_UP,           RDE_INPUT_STATUS_KEEP_RELEASED },
			{ RDE_KEYBOARD_KEY_DOWN,         RDE_INPUT_STATUS_KEEP_RELEASED },

        };

		ignoredEvents = { RDE_SYSTEM_EVENT_KEY_MAP_CHANGED_E, RDE_SYSTEM_EVENT_KEY_TEXT_EDITING_E };
    }

    void KeyboardInput::onKeyDown(SDL_Event& _event) {
		auto _key = static_cast<RDE_KEYBOARD_KEY_>(_event.key.keysym.scancode);

		pressedKeyboardKeys[_key] = RDE_INPUT_STATUS_JUST_PRESSED;

        KeyPressedEvent _e(_key, 1);
        window->consumeEvent(_e);
    }

    void KeyboardInput::onKeyUp(SDL_Event& _event) {
		auto _key = static_cast<RDE_KEYBOARD_KEY_>(_event.key.keysym.scancode);

		pressedKeyboardKeys[_key] = RDE_INPUT_STATUS_JUST_RELEASED;

        KeyReleasedEvent _e(_key);
        window->consumeEvent(_e);
    }

    void KeyboardInput::onTextTyped(SDL_Event& _event) {
        TextTypedEvent _e(_event.text.text);
        window->consumeEvent(_e);
    }

	RDE_INPUT_STATUS_ KeyboardInput::getState(RDE_KEYBOARD_KEY_ _keyOrButton) {
        return pressedKeyboardKeys[_keyOrButton];
    }

	void KeyboardInput::setState(RDE_KEYBOARD_KEY_ _keyOrButton, RDE_INPUT_STATUS_ _state) {
		pressedKeyboardKeys[_keyOrButton] = _state;
    }
}