#pragma once

#ifndef RDE_KEYBOARD_KEYS_H
#define RDE_KEYBOARD_KEYS_H

#include <cstdint>
#include <ostream>
#include "SDL2/SDL_scancode.h"

namespace RDE {

	/**
	 * @brief Codes for the keys of the keyboard.
	*/
	enum RDE_KEYBOARD_KEY_ : uint16_t {
		// From SDL2
		RDE_KEYBOARD_KEY_SPACE = SDL_SCANCODE_SPACE,
		RDE_KEYBOARD_KEY_APOSTROPHE = SDL_SCANCODE_APOSTROPHE,   /* ' */
		RDE_KEYBOARD_KEY_COMMA = SDL_SCANCODE_COMMA,             /* , */
		RDE_KEYBOARD_KEY_MINUS = SDL_SCANCODE_MINUS,             /* - */
		RDE_KEYBOARD_KEY_PERIOD = SDL_SCANCODE_PERIOD,           /* . */
		RDE_KEYBOARD_KEY_SLASH = SDL_SCANCODE_SLASH,             /* / */

		RDE_KEYBOARD_KEY_D0 = SDL_SCANCODE_0,                    /* 0 */
		RDE_KEYBOARD_KEY_D1 = SDL_SCANCODE_1,                    /* 1 */
		RDE_KEYBOARD_KEY_D2 = SDL_SCANCODE_2,                    /* 2 */
		RDE_KEYBOARD_KEY_D3 = SDL_SCANCODE_3,                    /* 3 */
		RDE_KEYBOARD_KEY_D4 = SDL_SCANCODE_4,                    /* 4 */
		RDE_KEYBOARD_KEY_D5 = SDL_SCANCODE_5,                    /* 5 */
		RDE_KEYBOARD_KEY_D6 = SDL_SCANCODE_6,                    /* 6 */
		RDE_KEYBOARD_KEY_D7 = SDL_SCANCODE_7,                    /* 7 */
		RDE_KEYBOARD_KEY_D8 = SDL_SCANCODE_8,                    /* 8 */
		RDE_KEYBOARD_KEY_D9 = SDL_SCANCODE_9,                    /* 9 */

		RDE_KEYBOARD_KEY_SEMICOLON = SDL_SCANCODE_SEMICOLON,     /* ; */
		RDE_KEYBOARD_KEY_EQUAL = SDL_SCANCODE_EQUALS,            /* = */

		RDE_KEYBOARD_KEY_A = SDL_SCANCODE_A,
		RDE_KEYBOARD_KEY_B = SDL_SCANCODE_B,
		RDE_KEYBOARD_KEY_C = SDL_SCANCODE_C,
		RDE_KEYBOARD_KEY_D = SDL_SCANCODE_D,
		RDE_KEYBOARD_KEY_E = SDL_SCANCODE_E,
		RDE_KEYBOARD_KEY_F = SDL_SCANCODE_F,
		RDE_KEYBOARD_KEY_G = SDL_SCANCODE_G,
		RDE_KEYBOARD_KEY_H = SDL_SCANCODE_H,
		RDE_KEYBOARD_KEY_I = SDL_SCANCODE_I,
		RDE_KEYBOARD_KEY_J = SDL_SCANCODE_J,
		RDE_KEYBOARD_KEY_K = SDL_SCANCODE_K,
		RDE_KEYBOARD_KEY_L = SDL_SCANCODE_L,
		RDE_KEYBOARD_KEY_M = SDL_SCANCODE_M,
		RDE_KEYBOARD_KEY_N = SDL_SCANCODE_N,
		RDE_KEYBOARD_KEY_O = SDL_SCANCODE_O,
		RDE_KEYBOARD_KEY_P = SDL_SCANCODE_P,
		RDE_KEYBOARD_KEY_Q = SDL_SCANCODE_Q,
		RDE_KEYBOARD_KEY_R = SDL_SCANCODE_R,
		RDE_KEYBOARD_KEY_S = SDL_SCANCODE_S,
		RDE_KEYBOARD_KEY_T = SDL_SCANCODE_T,
		RDE_KEYBOARD_KEY_U = SDL_SCANCODE_U,
		RDE_KEYBOARD_KEY_V = SDL_SCANCODE_V,
		RDE_KEYBOARD_KEY_W = SDL_SCANCODE_W,
		RDE_KEYBOARD_KEY_X = SDL_SCANCODE_X,
		RDE_KEYBOARD_KEY_Y = SDL_SCANCODE_Y,
		RDE_KEYBOARD_KEY_Z = SDL_SCANCODE_Z,

		RDE_KEYBOARD_KEY_LEFT_BRACKET = SDL_SCANCODE_LEFTBRACKET,  /* [ */
		RDE_KEYBOARD_KEY_BACK_SLASH = SDL_SCANCODE_BACKSLASH,      /* \ */
		RDE_KEYBOARD_KEY_RIGHT_BRACKET = SDL_SCANCODE_RIGHTBRACKET,/* ] */
		RDE_KEYBOARD_KEY_GRACE_ACCENT = SDL_SCANCODE_GRAVE,        /* ` */

		RDE_KEYBOARD_KEY_ESCAPE = SDL_SCANCODE_ESCAPE,
		RDE_KEYBOARD_KEY_ENTER = SDL_SCANCODE_RETURN,
		RDE_KEYBOARD_KEY_TAB = SDL_SCANCODE_TAB,
		RDE_KEYBOARD_KEY_BAKCSPACE = SDL_SCANCODE_BACKSPACE,
		RDE_KEYBOARD_KEY_INSERT = SDL_SCANCODE_INSERT,
		RDE_KEYBOARD_KEY_DELETE = SDL_SCANCODE_DELETE,
		RDE_KEYBOARD_KEY_RIGHT = SDL_SCANCODE_RIGHT,
		RDE_KEYBOARD_KEY_LEFT = SDL_SCANCODE_LEFT,
		RDE_KEYBOARD_KEY_DOWN = SDL_SCANCODE_DOWN,
		RDE_KEYBOARD_KEY_UP = SDL_SCANCODE_UP,
		RDE_KEYBOARD_KEY_PAGE_UP = SDL_SCANCODE_PAGEUP,
		RDE_KEYBOARD_KEY_PAGE_DOWN = SDL_SCANCODE_PAGEDOWN,
		RDE_KEYBOARD_KEY_HOME = SDL_SCANCODE_HOME,
		RDE_KEYBOARD_KEY_END = SDL_SCANCODE_END,
		RDE_KEYBOARD_KEY_CAPS_LOCK = SDL_SCANCODE_CAPSLOCK,
		RDE_KEYBOARD_KEY_SCROLL_LOCK = SDL_SCANCODE_SCROLLLOCK,
		RDE_KEYBOARD_KEY_NUM_LOCK = SDL_SCANCODE_NUMLOCKCLEAR,
		RDE_KEYBOARD_KEY_PRINT_SCREEN = SDL_SCANCODE_PRINTSCREEN,
		RDE_KEYBOARD_KEY_PAUSE = SDL_SCANCODE_PAUSE,
		RDE_KEYBOARD_KEY_F1 = SDL_SCANCODE_F1,
		RDE_KEYBOARD_KEY_F2 = SDL_SCANCODE_F2,
		RDE_KEYBOARD_KEY_F3 = SDL_SCANCODE_F3,
		RDE_KEYBOARD_KEY_F4 = SDL_SCANCODE_F4,
		RDE_KEYBOARD_KEY_F5 = SDL_SCANCODE_F5,
		RDE_KEYBOARD_KEY_F6 = SDL_SCANCODE_F6,
		RDE_KEYBOARD_KEY_F7 = SDL_SCANCODE_F7,
		RDE_KEYBOARD_KEY_F8 = SDL_SCANCODE_F8,
		RDE_KEYBOARD_KEY_F9 = SDL_SCANCODE_F9,
		RDE_KEYBOARD_KEY_F10 = SDL_SCANCODE_F10,
		RDE_KEYBOARD_KEY_F11 = SDL_SCANCODE_F11,
		RDE_KEYBOARD_KEY_F12 = SDL_SCANCODE_F12,
		RDE_KEYBOARD_KEY_F13 = SDL_SCANCODE_F13,
		RDE_KEYBOARD_KEY_F14 = SDL_SCANCODE_F14,
		RDE_KEYBOARD_KEY_F15 = SDL_SCANCODE_F15,
		RDE_KEYBOARD_KEY_F16 = SDL_SCANCODE_F16,
		RDE_KEYBOARD_KEY_F17 = SDL_SCANCODE_F17,
		RDE_KEYBOARD_KEY_F18 = SDL_SCANCODE_F18,
		RDE_KEYBOARD_KEY_F19 = SDL_SCANCODE_F19,
		RDE_KEYBOARD_KEY_F20 = SDL_SCANCODE_F20,
		RDE_KEYBOARD_KEY_F21 = SDL_SCANCODE_F21,
		RDE_KEYBOARD_KEY_F22 = SDL_SCANCODE_F22,
		RDE_KEYBOARD_KEY_F23 = SDL_SCANCODE_F23,
		RDE_KEYBOARD_KEY_F24 = SDL_SCANCODE_F24,

		/* Keypad */
		RDE_KEYBOARD_KEY_KP0 = SDL_SCANCODE_KP_0,
		RDE_KEYBOARD_KEY_KP1 = SDL_SCANCODE_KP_1,
		RDE_KEYBOARD_KEY_KP2 = SDL_SCANCODE_KP_2,
		RDE_KEYBOARD_KEY_KP3 = SDL_SCANCODE_KP_3,
		RDE_KEYBOARD_KEY_KP4 = SDL_SCANCODE_KP_4,
		RDE_KEYBOARD_KEY_KP5 = SDL_SCANCODE_KP_5,
		RDE_KEYBOARD_KEY_KP6 = SDL_SCANCODE_KP_6,
		RDE_KEYBOARD_KEY_KP7 = SDL_SCANCODE_KP_7,
		RDE_KEYBOARD_KEY_KP8 = SDL_SCANCODE_KP_8,
		RDE_KEYBOARD_KEY_KP9 = SDL_SCANCODE_KP_9,

		//        KPDecimal = 330,
		//        KPDivide = 331,
		//        KPMultiply = 332,
		//        KPSubtract = 333,
		//        KPAdd = 334,
		//        KPEnter = 335,
		//        KPEqual = 336,

		RDE_KEYBOARD_KEY_LEFT_SHIFT = SDL_SCANCODE_LSHIFT,
		RDE_KEYBOARD_KEY_LEFT_CTRL = SDL_SCANCODE_LCTRL,
		RDE_KEYBOARD_KEY_LEFT_ALT = SDL_SCANCODE_LALT,
		RDE_KEYBOARD_KEY_RIGHT_SHIFT = SDL_SCANCODE_RSHIFT,
		RDE_KEYBOARD_KEY_RIGHT_CTRL = SDL_SCANCODE_RCTRL,
		RDE_KEYBOARD_KEY_RIGHT_ALT = SDL_SCANCODE_RALT,
		RDE_KEYBOARD_KEY_MENU = SDL_SCANCODE_MENU
	};

	inline std::ostream &operator<<(std::ostream &os, RDE_KEYBOARD_KEY_ keyCode) {
        os << static_cast<int32_t>(keyCode);
        return os;
    }
}

#endif // RDE_KEYBOARD_KEYS_H
